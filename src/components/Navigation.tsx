'use client';import { useState } from 'react';import Link from 'next/link';import { useTheme } from '@/contexts/ThemeContext';import { Category } from '@/types';interface NavigationProps {  categories?: Category[];  selectedCategory?: string;  selectedPricingModels?: string[];  onCategoryChange?: (category: string) => void;  onPricingModelChange?: (models: string[]) => void;}export default function Navigation({   categories = [],  selectedCategory = 'all',  selectedPricingModels = [],  onCategoryChange,  onPricingModelChange}: NavigationProps) {  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);  const { theme, toggleTheme } = useTheme();  const handlePricingModelToggle = (model: string) => {    if (!onPricingModelChange) return;        const updatedModels = selectedPricingModels.includes(model)      ? selectedPricingModels.filter(m => m !== model)      : [...selectedPricingModels, model];        onPricingModelChange(updatedModels);  };  return (    <nav className="bg-white/80 dark:bg-gray-900/80 backdrop-blur-md border-b border-gray-200 dark:border-gray-700 sticky top-0 z-50">      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">        <div className="flex justify-between items-center h-16">          {/* Logo */}          <div className="flex items-center space-x-2">            <Link href="/" className="flex items-center space-x-2 hover:opacity-80 transition-opacity">              <div className="w-8 h-8 bg-gradient-to-br from-blue-500 to-purple-600 rounded-lg flex items-center justify-center">                <svg className="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 10V3L4 14h7v7l9-11h-7z" />                </svg>              </div>              <span className="font-bold text-xl text-gray-900 dark:text-white">                Free<span className="text-blue-600">Dev</span>              </span>            </Link>          </div>          {/* Desktop Filters */}          <div className="hidden lg:flex items-center space-x-6 flex-1 max-w-2xl mx-8">            {/* Category Filter */}            {categories.length > 0 && (              <div className="flex items-center space-x-2">                <select                  value={selectedCategory}                  onChange={(e) => onCategoryChange?.(e.target.value)}                  className="px-3 py-1.5 text-sm bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"                >                  <option value="all">All Categories</option>                  {categories.map((category) => (                    <option key={category.id} value={category.id}>                      {category.name} ({category.count})                    </option>                  ))}                </select>              </div>            )}            {/* Pricing Filters */}            <div className="flex items-center space-x-2">              {['free', 'freemium'].map((model) => (                <button                  key={model}                  onClick={() => handlePricingModelToggle(model)}                  className={`px-3 py-1.5 text-xs font-medium rounded-full transition-colors ${                    selectedPricingModels.includes(model)                      ? 'bg-blue-600 text-white'                      : 'bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-600'                  }`}                >                  {model === 'free' ? 'Free' : 'Freemium'}                </button>              ))}            </div>          </div>          {/* Actions */}          <div className="flex items-center space-x-4">            {/* GitHub Link */}            <a              href="https://github.com/shade-solutions/free-for-devs-ui"              target="_blank"              rel="noopener noreferrer"              className="hidden sm:flex items-center space-x-2 px-3 py-2 text-sm text-gray-700 dark:text-gray-300 hover:text-gray-900 dark:hover:text-white border border-gray-300 dark:border-gray-600 rounded-lg hover:bg-gray-50 dark:hover:bg-gray-800 transition-colors"            >              <svg className="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">                <path fillRule="evenodd" d="M10 0C4.477 0 0 4.484 0 10.017c0 4.425 2.865 8.18 6.839 9.504.5.092.682-.217.682-.483 0-.237-.008-.868-.013-1.703-2.782.605-3.369-1.343-3.369-1.343-.454-1.158-1.11-1.466-1.11-1.466-.908-.62.069-.608.069-.608 1.003.07 1.531 1.032 1.531 1.032.892 1.53 2.341 1.088 2.91.832.092-.647.35-1.088.636-1.338-2.22-.253-4.555-1.113-4.555-4.951 0-1.093.39-1.988 1.029-2.688-.103-.253-.446-1.272.098-2.65 0 0 .84-.27 2.75 1.026A9.564 9.564 0 0110 4.844c.85.004 1.705.115 2.504.337 1.909-1.296 2.747-1.027 2.747-1.027.546 1.379.203 2.398.1 2.651.64.7 1.028 1.595 1.028 2.688 0 3.848-2.339 4.695-4.566 4.942.359.31.678.921.678 1.856 0 1.338-.012 2.419-.012 2.747 0 .268.18.58.688.482A10.019 10.019 0 0020 10.017C20 4.484 15.522 0 10 0z" clipRule="evenodd" />              </svg>              <span>Source</span>            </a>            {/* About Link */}            <Link               href="/about"               className="hidden sm:block text-gray-700 dark:text-gray-300 hover:text-blue-600 dark:hover:text-blue-400 font-medium transition-colors"            >              About            </Link>            {/* Theme Toggle */}            <button               onClick={toggleTheme}              className="p-2 text-gray-500 dark:text-gray-400 hover:text-gray-700 dark:hover:text-gray-300 rounded-lg hover:bg-gray-100 dark:hover:bg-gray-800 transition-colors"              aria-label="Toggle theme"            >              {theme === 'light' ? (                <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M20.354 15.354A9 9 0 018.646 3.646 9.003 9.003 0 0012 21a9.003 9.003 0 008.354-5.646z" />                </svg>              ) : (                <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 3v1m0 16v1m9-9h-1M4 12H3m15.364 6.364l-.707-.707M6.343 6.343l-.707-.707m12.728 0l-.707.707M6.343 17.657l-.707.707M16 12a4 4 0 11-8 0 4 4 0 018 0z" />                </svg>              )}            </button>            {/* Mobile menu button */}            <button              onClick={() => setIsMobileMenuOpen(!isMobileMenuOpen)}              className="lg:hidden p-2 text-gray-500 dark:text-gray-400 hover:text-gray-700 dark:hover:text-gray-300 rounded-lg hover:bg-gray-100 dark:hover:bg-gray-800 transition-colors"            >              <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">                {isMobileMenuOpen ? (                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />                ) : (                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 6h16M4 12h16M4 18h16" />                )}              </svg>            </button>          </div>        </div>      </div>      {/* Mobile menu */}      {isMobileMenuOpen && (        <div className="lg:hidden border-t border-gray-200 dark:border-gray-700 bg-white dark:bg-gray-900">          <div className="px-4 py-4 space-y-4">            {/* Mobile Category Filter */}            {categories.length > 0 && (              <div>                <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">                  Category                </label>                <select                  value={selectedCategory}                  onChange={(e) => onCategoryChange?.(e.target.value)}                  className="w-full px-3 py-2 bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"                >                  <option value="all">All Categories</option>                  {categories.map((category) => (                    <option key={category.id} value={category.id}>                      {category.name} ({category.count})                    </option>                  ))}                </select>              </div>            )}            {/* Mobile Pricing Filters */}            <div>              <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">                Pricing              </label>              <div className="flex flex-wrap gap-2">                {['free', 'freemium'].map((model) => (                  <button                    key={model}                    onClick={() => handlePricingModelToggle(model)}                    className={`px-3 py-2 text-sm font-medium rounded-lg transition-colors ${                      selectedPricingModels.includes(model)                        ? 'bg-blue-600 text-white'                        : 'bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-600'                    }`}                  >                    {model === 'free' ? 'Free' : 'Freemium'}                  </button>                ))}              </div>            </div>            {/* Mobile Links */}            <div className="border-t border-gray-200 dark:border-gray-700 pt-4">              <Link                 href="/about"                 className="block px-3 py-2 text-gray-700 dark:text-gray-300 hover:text-blue-600 dark:hover:text-blue-400 font-medium rounded-lg hover:bg-gray-50 dark:hover:bg-gray-800 transition-colors"                onClick={() => setIsMobileMenuOpen(false)}              >                About              </Link>              <a                href="https://github.com/shade-solutions/free-for-devs-ui"                target="_blank"                rel="noopener noreferrer"                className="flex items-center space-x-2 px-3 py-2 text-gray-700 dark:text-gray-300 hover:text-blue-600 dark:hover:text-blue-400 font-medium rounded-lg hover:bg-gray-50 dark:hover:bg-gray-800 transition-colors mt-2"              >                <svg className="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">                  <path fillRule="evenodd" d="M10 0C4.477 0 0 4.484 0 10.017c0 4.425 2.865 8.18 6.839 9.504.5.092.682-.217.682-.483 0-.237-.008-.868-.013-1.703-2.782.605-3.369-1.343-3.369-1.343-.454-1.158-1.11-1.466-1.11-1.466-.908-.62.069-.608.069-.608 1.003.07 1.531 1.032 1.531 1.032.892 1.53 2.341 1.088 2.91.832.092-.647.35-1.088.636-1.338-2.22-.253-4.555-1.113-4.555-4.951 0-1.093.39-1.988 1.029-2.688-.103-.253-.446-1.272.098-2.65 0 0 .84-.27 2.75 1.026A9.564 9.564 0 0110 4.844c.85.004 1.705.115 2.504.337 1.909-1.296 2.747-1.027 2.747-1.027.546 1.379.203 2.398.1 2.651.64.7 1.028 1.595 1.028 2.688 0 3.848-2.339 4.695-4.566 4.942.359.31.678.921.678 1.856 0 1.338-.012 2.419-.012 2.747 0 .268.18.58.688.482A10.019 10.019 0 0020 10.017C20 4.484 15.522 0 10 0z" clipRule="evenodd" />                </svg>                <span>GitHub Source</span>              </a>            </div>          </div>        </div>      )}    </nav>  );}